# app/models/webhook.py
from __future__ import annotations
import uuid
from datetime import datetime
from typing import List, Optional, TYPE_CHECKING
from sqlalchemy import ForeignKey, Text, text
from sqlalchemy.dialects.postgresql import UUID, BIGINT, ARRAY
from sqlalchemy.orm import Mapped, mapped_column, relationship
from sqlalchemy.sql import func
from .base import Base  # Assuming your Base declarative base is in app/models/base.py

if TYPE_CHECKING:
    from .user import User
    from .repository import Repository


class Webhook(Base):
    """
    SQLAlchemy model for the 'webhooks' table, storing information about
    GitHub webhooks attached to user repositories.
    """

    __tablename__ = "webhooks"

    # Primary key, UUID generated by the database
    id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True), primary_key=True, server_default=text("gen_random_uuid()")
    )

    # Foreign key to the 'users' table, with cascade delete
    user_id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True), ForeignKey("users.id", ondelete="CASCADE"), nullable=False
    )

    # Foreign key to the 'repositories' table, with cascade delete
    repo_id: Mapped[int] = mapped_column(
        BIGINT, ForeignKey("repositories.id", ondelete="CASCADE"), nullable=False
    )

    # The ID of the webhook as assigned by GitHub, must be unique
    github_webhook_id: Mapped[int] = mapped_column(BIGINT, unique=True, nullable=False)

    # The URL provided by GitHub for managing this webhook (not your endpoint URL)
    url: Mapped[str] = mapped_column(Text, nullable=False)

    # The secret used to sign webhook payloads from GitHub
    secret: Mapped[str] = mapped_column(Text, nullable=False)

    # A list of event types the webhook is subscribed to (e.g., ["push", "pull_request"])
    events: Mapped[List[str]] = mapped_column(ARRAY(Text), nullable=False)

    # Whether the webhook is active on GitHub
    active: Mapped[bool] = mapped_column(server_default=text("true"))

    # Timestamp for when the record was created in your database
    created_at: Mapped[datetime] = mapped_column(server_default=func.now())

    # Timestamp for when the record was last updated in your database
    updated_at: Mapped[datetime] = mapped_column(
        server_default=func.now(), onupdate=func.now()
    )

    # Define relationships to other models
    # Relationship to the User model
    user: Mapped["User"] = relationship(back_populates="webhooks")
    # Relationship to the Repository model
    repository: Mapped["Repository"] = relationship(back_populates="webhooks")
